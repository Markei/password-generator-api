# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
  env(APP_GENERATION_LIMIT): "1000"
  app.generation_limit: "%env(APP_GENERATION_LIMIT)%"

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    Markei\PasswordGenerator\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    Markei\PasswordGenerator\Controller\:
        resource: '../src/Controller'
        tags:
           - { name: 'controller.service_arguments' }
    Markei\PasswordGenerator\Controller\GeneratorController:
        public: true
        arguments:
            $generationLimit: '%app.generation_limit%'
        tags:
           - { name: 'controller.service_arguments' }

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    Markei\PasswordGenerator\EventListener\FormatListener:
        tags:
           - { name: kernel.event_listener, event: kernel.request }
